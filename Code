//Programme for robot
#include <ESP8266WiFi.h>
#include <espnow.h>

// Motor control pins (Adjust these based on your wiring)
const int motor1Pin1 = D1; // Motor 1 forward
const int motor1Pin2 = D2; // Motor 1 backward
const int motor2Pin1 = D3; // Motor 2 forward
const int motor2Pin2 = D4; // Motor 2 backward

// Structure to receive data
typedef struct struct_message {
    char direction[10];
} struct_message;

struct_message myData;

// Callback function when data is received
void OnDataRecv(uint8_t *mac, uint8_t *incomingData, uint8_t len) {
  memcpy(&myData, incomingData, sizeof(myData));
  
  // Print the direction received
  Serial.print("Direction received: ");
  Serial.println(myData.direction);
  
  // Call motor control function based on the received direction
  controlCar(myData.direction);
}

void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);

  // Set motor control pins as output
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);

  // Set all motors to stop initially
  stopMotors();

  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);
  
  // Init ESP-NOW
  if (esp_now_init() != 0) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Register callback function to receive data
  esp_now_set_self_role(ESP_NOW_ROLE_SLAVE);
  esp_now_register_recv_cb(OnDataRecv);

  Serial.println("Receiver ready.");
}

void loop() {
  // Nothing needed here; everything is handled in the OnDataRecv callback
}

// Function to control the car motors based on the direction
void controlCar(const char* direction) {
  if (strcmp(direction, "FORWARD") == 0) {
    Serial.println("Moving forward");
    moveForward();
  } else if (strcmp(direction, "BACKWARD") == 0) {
    Serial.println("Moving backward");
    moveBackward();
  } else if (strcmp(direction, "LEFT") == 0) {
    Serial.println("Turning left");
    turnLeft();
  } else if (strcmp(direction, "RIGHT") == 0) {
    Serial.println("Turning right");
    turnRight();
  } else {
    Serial.println("Stopping motors");
    stopMotors();
  }
}

// Functions to control motor movement
void moveForward() {
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, LOW);
}

void moveBackward() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, HIGH);
}

void turnLeft() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, LOW);
}

void turnRight() {
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, HIGH);
}

void stopMotors() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, LOW);
}

//Code for joystick
#include <WiFi.h>
#include <esp_now.h>

// Structure to send data
typedef struct struct_message {
    char direction[10];
} struct_message;

struct_message myData;

// MAC Address of the receiver ESP8266
uint8_t broadcastAddress[] = {0xD8, 0xBF, 0xC0, 0xF8, 0x2C, 0x71}; // Updated MAC address

// Define GPIO pins for the joystick
const int xPin = 34;
const int yPin = 35;
const int buttonPin = 13;

// Callback function when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("Last Packet Send Status: ");
  if (status == ESP_NOW_SEND_SUCCESS) {
    Serial.println("Delivery Success");
  } else {
    Serial.println("Delivery Failed");
  }
}

void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);

  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Register the send callback
  esp_now_register_send_cb(OnDataSent);

  // Register peer with the MAC address of the receiver
  esp_now_peer_info_t peerInfo;
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;
  
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }

  // Set joystick pins as input
  pinMode(xPin, INPUT);
  pinMode(yPin, INPUT);
  pinMode(buttonPin, INPUT_PULLUP);

  Serial.println("Controller ready.");
}

void loop() {
  // Read joystick values
  int xVal = analogRead(xPin);
  int yVal = analogRead(yPin);
  int buttonVal = digitalRead(buttonPin);

  // Debugging prints to Serial Monitor
  Serial.print("X: ");
  Serial.print(xVal);
  Serial.print(" Y: ");
  Serial.print(yVal);
  Serial.print(" Button: ");
  Serial.println(buttonVal);

  // Determine direction based on joystick values
  if (xVal < 1000) {
    strcpy(myData.direction, "RIGHT");
  } else if (xVal > 3000) {
    strcpy(myData.direction, "LEFT");
  } else if (yVal > 2500) {  // Adjusted threshold for FORWARD
    strcpy(myData.direction, "FORWARD");
  } else if (yVal < 1500) {
    strcpy(myData.direction, "BACKWARD");
  } else if (buttonVal == LOW) {
    strcpy(myData.direction, "PRESSED");
  } else {
    strcpy(myData.direction, "STOP");
  }

  // Print the data to be sent to the Serial Monitor
  Serial.print("Sending data: ");
  Serial.println(myData.direction);

  // Send message via ESP-NOW
  esp_now_send(broadcastAddress, (uint8_t *) &myData, sizeof(myData));
  
  delay(100); // Adjust delay to avoid sending too many messages
}
